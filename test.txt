const navLinks = [
  {
    label: "Home",
    link: "home",
  },
  {
    label: "Happy Couple",
    link: "happy-couple",
  },
  {
    label: "Love Story",
    link: "love-story",
  },
  {
    label: "Our Photos",
    link: "our-photos",
  },
  {
    label: "Venus",
    link: "venus",
  },
];

import React, { useCallback, useRef, useState } from "react";
import { Box, Button, styled } from "@mui/material";
import { StaticImageData } from "next/image";
import { AnimatePresence, motion } from "framer-motion";
import { Splide, SplideSlide } from "@splidejs/react-splide";

interface Props {
  images: StaticImageData[];
}

interface StyledImageProps {
  index: number;
  activeImgIndex: number;
}

const variants = {
  initial: { opacity: 0.7 },
  animate: {
    opacity: 1,
    transition: {
      delay: 0.5,
      duration: 0.5,
    },
  },
};

const StyledImage = styled(Box)<StyledImageProps>(
  ({ index, activeImgIndex }) => {
    return {
      transform: `scale(${index === activeImgIndex ? "1.2" : "0.8"})`,
      transition: "transform 0.3s ease-in-out",
      margin: `${index === activeImgIndex ? "20px" : "10px"}`,
    };
  }
);

const ImageSlider = (props: Props) => {
  const { images } = props;
  const [slidingImages, setSlidingImages] = useState(images);
  const activeImgIndex = 1;

  const prev = useCallback(() => {
    setSlidingImages((prevValue) => {
      const lastImage = prevValue[prevValue.length - 1];
      const remainingImages = prevValue.slice(0, -1);
      return [lastImage, ...remainingImages];
    });
  }, []);

  const next = useCallback(() => {
    setSlidingImages((prevValue) => {
      const firstImage = prevValue[0];
      const remainingImages = prevValue.slice(1);
      return [...remainingImages, firstImage];
    });
  }, []);

  return (
    <>
      <div
        style={{
          display: "flex",
          overflow: "hidden",
          marginBottom: "50px",
        }}
      >
        <AnimatePresence initial={false}>
          {slidingImages.map((img, index) => {
            const isActive = activeImgIndex === index;
            return (
              <StyledImage
                key={index}
                component={motion.img}
                src={img.src}
                index={index}
                activeImgIndex={activeImgIndex}
                animate={isActive ? "animate" : "initial"}
                variants={variants}
              />
            );
          })}
        </AnimatePresence>
      </div>
      <Button onClick={prev}>Prev</Button>
      <Button onClick={next}>Next</Button>
      <motion.button whileHover={{ scale: 1.1 }} whileTap={{ scale: 0.9 }}>
        TTTTTT
      </motion.button>
    </>
  );
};

export default ImageSlider;
